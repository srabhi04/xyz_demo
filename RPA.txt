Practical 1: RPA Basics – Sequences and Flowcharts
Objective:

To understand and implement the basics of RPA using UiPath by creating sequence-based and flowchart-based projects, performing number calculations, and using different types of variables.
a. Create a Simple Sequence-Based Project
Steps:
Open UiPath Studio → Select Process → Name the project “SequenceDemo”.
In the project panel, drag a Sequence activity into the main workflow.
Inside the sequence
Drag a Write Line activity.
Type the message: “This is a simple sequence execution.”
Save and run the project.
Output appears in the Output panel showing the message.
✅ Result: A basic sequence project runs step-by-step in a linear order.
b. Create a Flowchart-Based Project
Steps:
Create a new project in UiPath → Name it “FlowchartDemo”
From the Activities panel, drag a Flowchart into the Main workflow.
Inside the flowchart:
Drag a Start node.
Connect it to a Write Line activity with message “Flowchart execution started.”
Add a Flow Decision node → condition: 2 > 1.
If True → connect to a Write Line activity “Condition is True.”
If False → connect to another Write Line activity “Condition is False.”
Save and run the workflow.
✅ Result: Flowcharts allow branching and decision-making during execution.
c. Automate UiPath Number Calculation
Steps:
Create a new project → Name it “NumberCalculation”.
Use a Sequence activity.
Declare variables in Variables Panel:
num1 (Int32) = 20
num2 (Int32) = 5
result (Int32)
Perform operations:
Assign activity: result = num1 - num2 → then use Write Line to display “Subtraction Result: 15”.
Assign activity: result = num1 * num2 → display “Multiplication Result: 100”.
Assign activity: result = num1 / num2 → display “Division Result: 4”.
Run the project.
✅ Result: UiPath successfully automates subtraction, multiplication, and division.
d. UiPath Project Using Different Types of Variables
Steps:
Create a new project → Name it “VariableTypesDemo”.
In the Variables Panel, create:
numberVar (Int32) = 50
dateVar (DateTime) = Now
boolVar (Boolean) = True
genericVar (GenericValue) = "123"
arrayVar (Array of String) = {“Apple”, “Banana”, “Mango”}
dataTableVar (DataTable)
Workflow Implementation:
Use Write Line to display:
numberVar.ToString
dateVar.ToString
boolVar.ToString
genericVar.ToString
Use For Each activity to loop through arrayVar and print each fruit.
Use Build Data Table activity to create a table with columns ID and Name → Add sample rows → Display with Output Data Table + Write Line.
Save and run the workflow.
✅ Result: Different variable types are declared and used successfully in automation.
Conclusion:
In this practical, we learned:
Sequences execute activities step by step.
Flowcharts allow branching and decision-making.
Basic arithmetic operations can be automated in UiPath.
Different types of variables (Int, Boolean, DateTime, Generic, Array, DataTable) can be created and used in RPA workflows.

-------------------------------------------------------------------------------------------------
Practical 2: Decision making and looping
a. Consider an array of names. We have to find out how many of them start with the
letter "a". Create an automation where the number of names starting with "a" is.
counted and the result is displayed.
Demonstrate switch statement with an example.
Create an automation To Print numbers from 1 to 10 with break after the writeline
activity inside for each activity
b.
C.
d.
c.
f. Create an automation to demonstrate use of decision statements (if)
Create an automation using Do..While Activity to print numbers from 5 to 1
Create an automation using Delay Activity between two writeline activities to
separate their execution by 5 seconds
[go for these, provide in same format
Practical 2: Decision Making and Looping in the same clean, journal-ready format as Practical 1.

Practical 2: Decision Making and Looping
Objective:
To understand decision-making and looping in UiPath by implementing activities such as If, Switch, For Each, Do While, and Delay.
a. Count Names Starting with “a”
Steps:
Create a new project → Name it “CountNamesDemo”.
In the Variables Panel, create:
namesArray (Array of String) = {“amit”, “Anita”, “Rahul”, “Arjun”, “Meena”}
count (Int32) = 0
Drag a For Each activity:
Type Argument = String
Iterate over namesArray.
Inside the loop:
Add an If activity → Condition: item.ToLower.StartsWith("a").
If True → Use Assign → count = count + 1.
After the loop, use Write Line → "Total names starting with 'a': " + count.ToString.
Run the project.
✅ Result: UiPath counts how many names start with the letter “a”.
b. Demonstrate Switch Statement
Steps:
Create a new project → Name it “SwitchDemo”.
In the Variables Panel, create:
day (String) = "Monday"
Drag a Switch activity.
Expression = day
Type Argument = String
Add cases:
Case "Monday" → Write Line: "Start of the week!"
Case "Friday" → Write Line: "Weekend is coming!"
Default → Write Line: "Normal day."
Save and run.
✅ Result: Output changes based on the value of day.
c. Print Numbers 1 to 10 with Break
Steps:
Create a new project → Name it “LoopWithBreak”.
Create variable:
numbers (Array of Int32) = {1,2,3,4,5,6,7,8,9,10}
Use For Each activity:
Type Argument = Int32
Iterate over numbers.
Inside the loop:
Use Write Line → item.ToString.
Add Break activity immediately after Write Line.
Run the workflow.
✅ Result: Only the first number (1) is printed because of the Break.
d. Demonstrate If Statement
Steps:
Create a new project → Name it “IfStatementDemo”.
Variables:
num (Int32) = 15
Drag an If activity:
Condition: num > 10
Then → Write Line: "Number is greater than 10."
Else → Write Line: "Number is less than or equal to 10."
Run the workflow.
✅ Result: Displays condition result using If statement.
e. Do While Activity (Print 5 to 1)
Steps:
Create a new project → Name it “DoWhileDemo”.
Create variable:
num (Int32) = 5
Add a Do While activity:
Inside Do:
Write Line: num.ToString
Assign: num = num - 1
Condition: num >= 1
Run the workflow.
✅ Result: Numbers from 5 down to 1 are printed.
f. Delay Activity (5 seconds delay)
Steps:
Create a new project → Name it “DelayDemo”.
Add Write Line → "First Message".
Add Delay activity → Duration: 00:00:05 (5 seconds).
Add Write Line → "Second Message".
Run the workflow.
✅ Result: After the first message, execution pauses for 5 seconds before printing the second message.
Conclusion:
In this practical, we learned how to:
Use loops (For Each, Do While) for iteration.
Apply decision-making with If and Switch activities.
Implement Break to exit a loop early.
Add Delay to control execution timing.

-----------------------------------------------------------------------
Practical 3: Types of Recording
Basic Recording using Toolbar
b. Basic Recording using Notepad
c. Desktop Recording using Tool bar
d.
c.
f.
Desktop Recording by creating a workflow
Web Recording e.g. Find the rating of the movie from imdbweb site
Web Recording manually

I’ll prepare Practical 3: Types of Recording in the same journal-ready format as earlier. This one will cover Basic Recording, Desktop Recording, and Web Recording step by step.
Practical 3: Types of Recording in UiPath
Objective:
To learn different types of recording methods in UiPath (Basic, Desktop, and Web Recording) and implement them using real-world examples.
a. Basic Recording using Toolbar
Steps:
Open UiPath Studio → Create new project → Name it “BasicRecordingDemo”.
From the Design Tab, select Recording → Basic.
The recording toolbar opens.
Perform simple actions (example: open Calculator from Start Menu).
Click Start → Calculator.
Type numbers and perform addition.
Click Stop to save the recording.
Save workflow and run.
✅ Result: Basic Recording captures step-by-step mouse/keyboard actions and replays them.
b. Basic Recording using Notepad
Steps:
Open UiPath → Create new project → Name it “NotepadRecording”.
Select Recording → Basic.
From the toolbar:
Click Start → Notepad.
Type: “Hello, this is RPA Recording in Notepad.”
Use Save As and give filename “TestNote.txt”.
Stop recording.
Run the workflow.
✅ Result: Automation opens Notepad, types a message, and saves it as a text file.
c. Desktop Recording using Toolbar
Steps:
Create new project → Name it “DesktopRecordingDemo”.
From Design Tab, select Recording → Desktop.
Actions performed:
Open Calculator
Type 20 + 10 and press Enter.
Stop the recording.
Run the workflow.
✅ Result: Desktop Recording captures UI interactions like button clicks, menu selection, and typing inside applications.
d. Desktop Recording by Creating a Workflow
Steps:
Create new project → Name it “DesktopWorkflowDemo”.
Instead of toolbar recording, manually build the workflow:
Use Open Application activity → select Notepad.
Add Type Into activity → text: “This is desktop recording by workflow.”
Add Click → File → Save As → save as “WorkflowNote.txt”.
Save and run.
✅ Result: Desktop automation works without toolbar recording, by manually arranging activities.
e. Web Recording (IMDB Movie Rating)
Steps:
Create project → Name it “WebRecordingDemo”.
From Design Tab → Recording → Web.
Open browser (Chrome/Edge).
In recording toolbar:
Navigate to https://www.imdb.com
Search for a movie (example: Inception).
Highlight and capture the movie rating element.
Extract text.
Stop recording.
Run the workflow.
✅ Result: The automation opens IMDb, searches for a movie, and fetches the rating.
f. Web Recording Manually
Steps:
Create new project → Name it “ManualWebRecording”.
Drag Open Browser activity → URL: https://www.imdb.com.
Use Type Into activity → enter “Inception” in the search box.
Use Click activity → Search button.
Use Get Text activity → indicate movie rating on IMDb page.
Use Write Line → display rating in Output panel.
Save and run.
✅ Result: Manually created web automation performs same task as web recording but gives more flexibility and control.
Conclusion:
In this practical, we learned:
Basic Recording: Captures mouse/keyboard actions step-by-step.
Desktop Recording: Best for automating desktop apps like Notepad, Calculator.
Web Recording: Useful for browser automation (e.g., IMDb rating extraction).
Manual workflow creation: Provides more customization compared to recordings.

--------------------------------------------------------------------------
Practical 4: Excel Automation
a. Automate the process to extract data from an excel file into a data table and vice versa
b. Create an automation ToWrite data to specific cell of an excel sheet.
c. Create an automation To Read data to specific cell of an excel sheet.
d. Create an automation To append data to specific cell of an excel sheet.
c. Create an automation To sort a table ofan excel sheet.
f. Create an automation To filter atable of an excel sheet
Practical 4: Excel Automation in the same journal-ready format. This one will cover data extraction, writing, reading, appending, sorting, and filtering using UiPath Excel activities.

Practical 4: Excel Automation
Objective:
To understand Excel automation in UiPath by reading, writing, appending, sorting, and filtering data in Excel files.
a. Extract Data from Excel File into DataTable and Vice Versa
Steps:
Create a new project → Name it “ExcelDataTableDemo”.
Drag an Excel Application Scope → select Excel file (e.g., StudentData.xlsx).
Inside scope, add Read Range activity → SheetName = "Sheet1".
Store result in variable: dtData (DataTable).
Use Output Data Table → convert dtData into a string.
Use Write Line → display data in Output panel.
To write back to Excel:
Drag Write Range activity → use dtData → write into "Sheet2".
Run the project.
✅ Result: Data is extracted from Excel into a DataTable and written back to another sheet.
b. Write Data to Specific Cell of Excel Sheet
Steps:
Create project → Name it “WriteCellDemo”.
Drag Excel Application Scope → select file.
Inside scope, use Write Cell activity:
Sheet = "Sheet1"
Cell = "B2"
Value = "Hello RPA".
Save and run.
✅ Result: The text “Hello RPA” is written into cell B2.
c. Read Data from Specific Cell of Excel Sheet
Steps:
Create project → Name it “ReadCellDemo”.
Drag Excel Application Scope → select file.
Inside scope, use Read Cell activity:
Sheet = "Sheet1"
Cell = "B2"
Store result in variable: cellValue (String).
Use Write Line → cellValue.
Run workflow.
✅ Result: The value from cell B2 is read and displayed in Output panel.
d. Append Data to Specific Cell of Excel Sheet
Steps:
Create project → Name it “AppendDataDemo”.
Drag Excel Application Scope → select file.
Inside scope, add Append Range activity.
Use a DataTable (create with Build Data Table).
Example row: ID=101, Name="Abhishek".
Select sheet (e.g., "Sheet1") → append data to last available row.
Run project.
✅ Result: New row is appended after existing data.
e. Sort a Table of Excel Sheet
Steps:
Create project → Name it “SortTableDemo”.
Drag Excel Application Scope → select Excel file.
Inside scope:
Use Read Range → store data in DataTable dtData.
Add Sort Data Table activity:
Input = dtData
Column Name = "Marks"
Sort Order = Ascending
Use Write Range → write sorted table to "Sheet2".
Run workflow.
✅ Result: Data is sorted by Marks column and saved to another sheet.
f. Filter a Table of Excel Sheet
Steps:
Create project → Name it “FilterTableDemo”.
Drag Excel Application Scope → select file.
Inside scope:
Use Read Range → store data in DataTable dtData.
Add Filter Data Table activity:
Condition: Marks >= 50
Output = dtFiltered
Use Write Range → write dtFiltered into "FilteredSheet".
Run workflow.
✅ Result: Only rows with Marks ≥ 50 are extracted and written into a new sheet.
Conclusion:
In this practical, we learned:
Extract & write data between Excel and DataTables.
Write, Read, and Append values into specific Excel cells.
Sort and Filter data from Excel using UiPath activities.
Excel automation helps in processing structured data efficiently without manual effort.

-------------------------------
Practical 5: Different controls in UiPath
a. Implement the attach window activity.
b. Automate using Anchor Base.
C. Automate using Element Exists.
d. Automate using Find Children control.
c. Use Get Ancestor control
f. Use Find Relative control

Practical 5: Different Controls in UiPath in the same journal-ready format. This practical focuses on important UI interaction activities like Attach Window, Anchor Base, Element Exists, Find Children, Get Ancestor, and Find Relative.

Practical 5: Different Controls in UiPath
Objective:
To understand and implement different UI automation controls in UiPath for handling applications and UI elements effectively.
a. Implement the Attach Window Activity
Steps:
Create a new project → Name it “AttachWindowDemo”.
Open a desktop application (e.g., Notepad).
In UiPath, drag Attach Window activity to the workflow.
Indicate the Notepad window.
Inside Attach Window:
Add a Type Into activity → Text: “This text is typed inside attached Notepad window.
Save and run.
✅ Result: Automation attaches to the Notepad window and types text.
b. Automate using Anchor Base
Steps:
Create project → Name it “AnchorBaseDemo”.
Open an application (e.g., a form with label “Username” and input box).
Drag Anchor Base activity to workflow.
In Anchor Position → select label “Username”.
In Action Section → add Type Into → Text: “Abhishek”.
Run the workflow.
✅ Result: Automation finds the Username input field using the label as an anchor and enters text.
c. Automate using Element Exists
Steps:
Create project → Name it “ElementExistsDemo”.
Drag Element Exists activity.
Indicate an element on screen (e.g., Calculator window).
Output → elementFound (Boolean variable).
Use If activity:
Condition: elementFound = True
Then → Write Line: “Element exists!”
Else → Write Line: “Element not found.”
Run workflow.
✅ Result: Workflow checks if a particular element is present on the screen.
d. Automate using Find Children Control
Steps:
Create project → Name it “FindChildrenDemo”.
Open a web page (e.g., IMDB homepage).
Drag Find Children activity.
Indicate a parent element (e.g., a menu bar).
Set Filter to capture all child elements (e.g., <webctrl />).
Store output in variable childrenList (IEnumerable of UiElement).
Use For Each → iterate childrenList → Inside, use Write Line → item.ToString.
Run workflow.
✅ Result: All child elements of a parent UI element are listed.
e. Use Get Ancestor Control
Steps:
Create project → Name it “GetAncestorDemo”.
Open a webpage with nested elements (e.g., search box inside a form).
Drag Find Element → select child element (like search box).
Use Get Ancestor activity:
Input = selected element
Output = ancestorElement (UiElement).
Use Highlight activity on ancestorElement to visualize.
Run workflow.
✅ Result: Automation finds the ancestor (parent container) of the given element.
f. Use Find Relative Control
Steps:
Create project → Name it “FindRelativeDemo”.
Open a webpage with labels and values (e.g., "Email:" followed by a text field).
Use Find Relative Element activity:
Indicate Anchor Element = "Email" label.
Indicate Target Element = input field next to Email.
Inside target, add Type Into → Text: “abc@gmail.com
”.
Save and run.
✅ Result: Workflow finds the target field relative to the anchor and types the email.
Conclusion:
In this practical, we learned:
Attach Window helps focus on a specific application window.
Anchor Base locates UI elements based on nearby labels.
Element Exists checks presence of UI elements.
Find Children extracts all child UI elements of a parent.
Get Ancestor retrieves parent elements of a UI control.
Find Relative identifies elements based on relative position to anchors.

---------------------------------------------------------------------------------------------------------
Practical 6: Keyboard and Mouse Events
a. Demonstrate the following activities in UiPath:
i. Mouse (click, double click and hover)
11. Type into
. Type Secure text
b. Demonstrate the following events in UiPath:
i. Element triggering event
ii. Image triggering event
11. System Triggering Event
c. Automate the process of launching an assistant bot on a keyboard event.

Let’s prepare Practical 6: Keyboard and Mouse Events in a journal-ready format, covering all mouse, keyboard, and triggering events.

Practical 6: Keyboard and Mouse Events
Objective:
To understand and automate keyboard and mouse events, as well as triggering events in UiPath for real-time interactions.
a. Demonstrate Mouse and Keyboard Activities
i. Mouse Activities (Click, Double Click, Hover)
Steps:
Create a new project → Name it “MouseEventsDemo”.
Drag Click activity → Indicate an application element (e.g., Notepad icon).
Drag Double Click activity → Open a folder or file.
Drag Hover activity → Hover over a menu or button (e.g., Start Menu → Settings).
Save and run workflow.
✅ Result: UiPath performs single click, double click, and hover actions.
ii. Type Into Activity
Steps
Create project → Name it “TypeIntoDemo”.
Open an application (Notepad).
Drag Type Into activity → Indicate Notepad window → Text: “Hello, this is a keyboard typing demo.”
Run workflow.
✅ Result: Text is typed automatically into Notepad.
iii. Type Secure Text Activity
Steps:
Create project → Name it “TypeSecureTextDemo”.
Open a login page or Notepad (for demonstration).
Drag Type Secure Text activity → Indicate password field.
Create a SecureString variable → Assign value using UiPath Studio → Variables Panel.
Run workflow.
✅ Result: Sensitive data is entered securely without exposing plain text.
b. Demonstrate Triggering Events in UiPath
i. Element Triggering Event
Steps:
Create project → Name it “ElementTriggerDemo”.
Drag Element Trigger activity.
Indicate an element (e.g., button on Calculator or Notepad).
Set action → On Click → Type Into a message or perform a calculation.
Run workflow → Click element to trigger automation.
✅ Result: Workflow triggers action when the specified element is interacted with.
ii. Image Triggering Event
Steps:
Create project → Name it “ImageTriggerDemo”.
Drag Image Trigger activity.
Indicate an image on screen (e.g., Calculator icon).
Set action → Type Into or Click when image appears.
Run workflow → Automation triggers when image is visible.
✅ Result: Workflow triggers action when the image appears on screen.
iii. System Triggering Event
Steps:
Create project → Name it “SystemTriggerDemo”.
Drag System Trigger activity.
Select event type → e.g., On Key Press, On File Change, or On System Event.
Define action → Type Into Notepad: “System Trigger Activated”.
Run workflow → Press key / trigger system event to execute.
✅ Result: Workflow triggers automatically based on a system-level event.
c. Automate Launching an Assistant Bot on Keyboard Event
Steps:
Create project → Name it “AssistantBotDemo”.
Drag Global Keyboard Shortcut activity (System Trigger → On Key Press).
Define shortcut → e.g., Ctrl + Alt + B.
Inside activity:
Drag Open Application / Start Process → Launch assistant bot executable.
Save and run workflow.
Press defined shortcut → Assistant bot launches.
✅ Result: Assistant bot is triggered automatically using a keyboard shortcut.
Conclusion:
In this practical, we learned:
Mouse activities (Click, Double Click, Hover) automate UI navigation.
Keyboard activities (Type Into, Type Secure Text) automate data entry.
Triggering events (Element, Image, System) automate actions based on real-time changes.
Keyboard shortcuts can launch applications or bots dynamically.

-----------------------------------------------------------------------------------------------------------------------
Practical 7: Screen Scraping and Web Scraping methods
a. Automate the following screen scraping methods using UiPath: 
i) Full Text
b. ii) Native
c. iii) OCR
d. Demonstrate Data Scraping and display values in Message box.
c. Demonstrate Screen Scraping for a pdf, web page and image file.

Practical 7: Screen Scraping and Web Scraping Methods

Objective:
To understand and implement various screen scraping and web scraping techniques in UiPath to extract data from applications, web pages, PDFs, and images.
a. Automate Screen Scraping Methods
i. Full Text Scraping
Steps:
Create a new project → Name it “FullTextScrapingDemo”.
Open an application (e.g., Calculator, Notepad)
From Design Tab → Screen Scraping → select Full Text.
Indicate element to extract (e.g., Calculator result display).
Store output in variable → fullTextResult (String).
Use Message Box → display fullTextResult.
Run workflow.
✅ Result: Extracts text quickly and accurately from standard UI elements.
ii. Native Scraping
Steps:
Create project → Name it “NativeScrapingDemo”.
Open an application or browser window.
Select Screen Scraping → Native.
Indicate UI element (e.g., a table on a webpage).
Store output → nativeText (String).
Use Message Box → display nativeText.
Run workflow.
✅ Result: Extracts structured data, best for web pages and tables.
iii. OCR Scraping
Steps:
Create project → Name it “OCRScrapingDemo”.
Open a screen with unstructured or image-based text.
Select Screen Scraping → OCR (choose engine: Tesseract OCR or Microsoft OCR).
Indicate element → extract text.
Store output → ocrText (String).
Use Message Box → display ocrText.
Run workflow.
✅ Result: Extracts text from images or applications where text cannot be selected.
b. Demonstrate Data Scraping from Web Page
Steps:
Create project → Name it “WebDataScrapingDemo”.
Open a browser → navigate to a webpage with structured data (e.g., product list).
From Design Tab → Data Scraping → select Extract Data Table.
Indicate first and second element of the table → UiPath captures entire tabl
Store output → dtWebData (DataTable).
Use Output Data Table → Write Line or Message Box → display table data.
Run workflow.
✅ Result: Structured data from web pages is extracted into a DataTable.
c. Demonstrate Screen Scraping for PDF, Web Page, and Image File
i. PDF Scraping
Steps:
Create project → Name it “PDFScrapingDemo”.
Drag Read PDF Text activity → select PDF file
Store output → pdfText (String).
Use Message Box → display pdfText.
Run workflow.
✅ Result: Text is extracted from PDF documents.
ii. Web Page Scraping
Steps:
Use project WebDataScrapingDemo.
Extract table/text from any web page using Data Scraping or Screen Scraping.
Display output in Message Box or Write Line.
✅ Result: Web data is extracted efficiently into UiPath.
iii. Image File Scraping
Steps:
Create project → Name it “ImageScrapingDemo”.
Use OCR Screen Scraping → indicate text area on the image.
Choose OCR engine → store output → imageText (String).
Use Message Box → display imageText.
Run workflow.
✅ Result: Text from images is extracted successfully.
Conclusion:
In this practical, we learned:
Full Text, Native, and OCR scraping methods for different UI scenarios.
Data Scraping for extracting structured tables from web pages.
Screen scraping works for PDFs, web pages, and images, enabling automation of text extraction.

----------------------------------------------------------------------------------------------------------
Practical 8: PDF Automation and Exception Handling
a. Read PDF With OCR
b. Merge PDF's into one
c. Get PDF Total Page count Using Regex
d. Demonstrate Exception Handling using UiPath

Here’s Practical 8: PDF Automation and Exception Handling in a journal-ready format.
Practical 8: PDF Automation and Exception Handling
Objective:
To automate PDF-related tasks in UiPath and handle exceptions effectively during automation.
a. Read PDF with OCR
Steps:
Create a new project → Name it “ReadPDFOCRDemo”.
Drag Read PDF with OCR activity.
Select PDF file (image-based PDF).
Choose OCR Engine → e.g., Tesseract OCR or Microsoft OCR.
Store output in variable → pdfText (String).
Use Message Box → display pdfText.
Run workflow.
✅ Result: Text from image-based PDF is extracted using OCR.
b. Merge PDFs into One
Steps:
Create a new project → Name it “MergePDFDemo”.
Use Invoke Code or Invoke Method activity (or UiPath.PDF.Activities → Merge PDF Files).
Provide input PDF files → List of PDFs (e.g., File1.pdf, File2.pdf).
Specify output file → MergedFile.pdf.
Run workflow.
✅ Result: Multiple PDF files are merged into a single PDF.
c. Get PDF Total Page Count Using Regex
Steps
Create project → Name it “PDFPageCountDemo”.
Use Read PDF Text activity → Extract all text from PDF.
Store output → pdfContent (String).
Use Assign activity with Regex → Count page occurrences:
otalPages = System.Text.RegularExpressions.Regex.Matches(pdfContent, "Page \d+").Count

Use Message Box → display "Total Pages: " + totalPages.ToString.
Run workflow.
✅ Result: Extracted total page count from PDF using Regex.
d. Demonstrate Exception Handling Using UiPath
Steps:
Create a new project → Name it “ExceptionHandlingDemo”.
Drag Try Catch activity
Inside Try:
Add Read PDF Text activity → select a non-existent PDF file (to generate error).
Inside Catch:
Exception Type = System.Exception
Add Message Box → "File not found! Exception handled successfully."
Run workflow.
✅ Result: UiPath catches the exception and handles the error gracefully without stopping the workflow.
Conclusion:
In this practical, we learned:
Read PDFs using OCR for image-based PDFs.
Merge multiple PDFs into a single file.
Count total pages in a PDF using Regex.
Exception handling with Try Catch ensures workflow stability and graceful error handling.


------------------------------------------------------------------------------------------------------
Practical 9: Email Automation
a. Configure Email using UiPath
b. Read Emails
c. Send Email with Attachment
d. Save Email Attachments
C. Reply to Email

Here’s Practical 9: Email Automation in a journal-ready format.
Practical 9: Email Automation
Objective:
To automate email-related tasks in UiPath including reading, sending, replying, and managing attachments.
a. Configure Email Using UiPath
Steps:
Create a new project → Name it “EmailConfigDemo”.
Drag Get IMAP Mail Messages or Get Outlook Mail Messages activity.
Configure properties:
MailFolder = "Inbox"
Account = your email ID (for Outlook)
Top = 10 (to fetch last 10 emails)
Store output in variable → mailList (List of MailMessage).
Test by running → UiPath connects to mailbox and fetches emails.
✅ Result: Email account configured and messages can be read.
b. Read Emails
Steps:
Create project → Name it “ReadEmailDemo”.
Use Get Outlook Mail Messages or IMAP Mail Messages → store in mailList.
Use For Each → iterate mailList:
Type Argument = MailMessage
Inside loop, use Write Line → item.Subject to display email subject.
Run workflow.
✅ Result: Subjects of all emails in Inbox are displayed in Output panel.
c. Send Email with Attachment
Steps:
Create project → Name it “SendEmailDemo”.
Drag Send Outlook Mail Message or Send SMTP Mail Message.
Configure properties:
To = recipient email
Subject = "Test Email from UiPath
Body = "Hello, this is a test email."
Attachments = "C:\Users\Abhishek\Documents\TestFile.pdf"
Save and run workflow.
✅ Result: Email is sent with the attachment.
d. Save Email Attachments
Steps:
Create project → Name it “SaveAttachmentsDemo”.
Drag Get Outlook Mail Messages → store in mailList.
Use For Each → iterate mailList.
Inside loop, add Save Attachments activity:
MailMessage = item
Folder Path = "C:\Users\Abhishek\Downloads\Attachments\"
Run workflow.
✅ Result: All attachments from emails are saved in the specified folder.
e. Reply to Email
Steps:
Create project → Name it “ReplyEmailDemo”.
Drag Get Outlook Mail Messages → store in mailList.
Use For Each → iterate mailList:
Inside loop, drag Reply To Outlook Mail Message activity
Properties:
MailMessage = item
Body = "Thank you for your email."
IsHtml = False
Run workflow.
✅ Result: Workflow replies to emails automatically.

Conclusion:
In this practical, we learned:
How to configure email accounts in UiPath.
Read, send, and reply to emails.
Save attachments from emails.
Autom
-----------------------------------------------------------------------------------------
Practical 10: Orchestrator management and mini project
a. Deploy bots to Orchestrator
b. Run jobs from Orchestrator
C. Queue Introduction:
i. Add items to Queue.
ii. Get Queue item from Orchestrator
d. Build UiPath Chatbot using Google dialogflow

Practical 10: Orchestrator Management and Mini Project
Objective:
To understand UiPath Orchestrator for deploying, managing, and running bots, working with queues, and building a basic chatbot integration.
a. Deploy Bots to Orchestrator
Steps:
Create a UiPath project → Name it “OrchestratorBotDemo”.
Open UiPath Studio → Project → Publish.
Select Orchestrator as the destination → click Publish.
Open UiPath Orchestrator → go to Tenant → Processes.
Confirm the uploaded package appears.
Create a Robot in Orchestrator → link it to environment.
Assign the process to the robot.
✅ Result: The bot is deployed to Orchestrator and ready to run.
b. Run Jobs from Orchestrator
Steps:
Open Orchestrator → Jobs → Start Job.
Select the Robot and Process.
Click Start.
Monitor job status (Pending → Running → Successful/Failed).
Check logs and output generated by the bot.
✅ Result: The deployed bot runs from Orchestrator, and outputs are logged centrally.
c. Queue Introduction
i. Add Items to Queue
Steps:
Open Orchestrator → go to Queues → Create Queue → Name it “DemoQueue”.
In UiPath Studio → drag Add Queue Item activity.
Properties:
QueueName = "DemoQueue"
ItemInformation = Dictionary or simple string.
Run workflow → Item is added to Orchestrator queue.
✅ Result: Items are successfully added to Orchestrator queue.
ii. Get Queue Item from Orchestrator
Steps:
Drag Get Transaction Item activity → QueueName = "DemoQueue".
Add Process Transaction workflow inside For Each Transaction logic.
After processing, use Set Transaction Status → mark as Successful or Failed.
Run workflow.
✅ Result: Bot retrieves items from Orchestrator queue and processes them one by one.
d. Build UiPath Chatbot Using Google Dialogflow
Steps:
Create a Google Dialogflow agent → set up intents and responses.
In UiPath Studio → create new project “DialogflowChatbotDemo”.
Use HTTP Request activity → connect UiPath bot to Dialogflow API.
Endpoint = Dialogflow webhook
Method = POST
Headers = Content-Type: application/json
Body = user input JSON
Get response from Dialogflow → store in variable botResponse.
Display response using Message Box or Type Into on a chat interface.
Run workflow → Chatbot responds based on Dialogflow intent.
✅ Result: UiPath bot communicates with Dialogflow and provides intelligent responses.

Conclusion:
In this practical, we learned:
Deploying and running bots from Orchestrator.
Using Queues to manage tasks efficiently.
Integrating UiPath with Google Dialogflow to build a mini chatbot project.
Centralized monitoring, logging, and control of bots using Orchestrator.