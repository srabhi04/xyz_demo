⚙️ 2. UiPath Installation
🪄 Step-by-Step Installation

Go to UiPath official site:
👉 https://cloud.uipath.com

Sign Up / Log In

Use your Google or Microsoft account.

You’ll get access to UiPath Automation Cloud (Community License) — 100% free for learning.

Access your organization

After login, you’ll see something like https://cloud.uipath.com/<yourOrg>/<tenant>/portal.

This is your UiPath Cloud Orchestrator (used in Practical 10).

Download UiPath Studio

Click your profile (top-right) → Download UiPath Studio.

Run the installer → choose Community License (for non-commercial learning use).

During installation:

Select UiPath Studio (not just Robot).

Enable UiPath Assistant.

Allow it to install .NET Desktop Runtime if prompted.

Launch UiPath Studio

After installation, open UiPath Studio → Sign in with your UiPath account.

Choose:

Profile: Student / Community

License type: Community Edition

🧰 3. Initial UiPath Studio Setup
3.1 Create Your First Project

Open UiPath Studio → Click “Process” → Name: RPA_Practical_1

Location: Choose your folder (e.g., Documents\UiPathProjects)

3.2 Interface Overview

Understand key panels:

Activities Panel → All available actions (like Excel, Message Box, etc.)

Properties Panel → Modify parameters of any activity

Output Panel → Logs and errors

Project Panel → Your file structure

Main.xaml → Main workflow file

📦 4. Install & Manage Packages

Many of your practicals (Excel, PDF, Email, Browser Automation) require packages.

🧩 Essential Packages List
Category	Package Name	Use
✅ Core	UiPath.System.Activities, UiPath.UIAutomation.Activities	Default automation activities
🧾 Excel	UiPath.Excel.Activities	Excel read/write, filters, tables
📧 Email	UiPath.Mail.Activities	Outlook, SMTP, IMAP mail automation
📄 PDF	UiPath.PDF.Activities	Read, merge, and extract PDF data
🌐 Web	UiPath.WebAPI.Activities, UiPath.UIAutomationNext	Web & API automation
💬 Data	UiPath.DataTable.Activities	Manage data tables
🤖 Orchestrator	UiPath.Orchestrator.Activities	Queue, Bot deployment
🔍 Computer Vision	UiPath.CV.Activities	Image-based automation
🧠 AI & NLP	UiPath.Dialogflow.Activities (for Chatbot)	Integrate Google Dialogflow
How to Install

Open your project.

Go to Manage Packages (Ctrl+P).

Enable Official Feed and Go! Feed.

Search → Install the required package → Click Save.

🌐 5. Browser & Extensions Setup

For web scraping and automation (Practicals 3, 7, 10):

Browser	Extension	Installation Method
Chrome	UiPath Web Automation	Studio → Home → Tools → Install Chrome Extension
Edge	UiPath Web Automation	Studio → Home → Tools → Install Edge Extension

Then, restart the browser after enabling the extension.

🧮 6. Additional Tools (for later practicals)
Tool	Use	Install From
MS Excel	Excel automation	Office 2016+ or MS 365
Adobe Reader	For PDF automation	adobe.com

Gmail / Outlook	Email automation	Connect to UiPath via IMAP/SMTP/Outlook activities
Google Dialogflow	Chatbot (Practical 10)	dialogflow.cloud.google.com

Orchestrator	Bot deployment	Included in Cloud account
🔐 7. UiPath Assistant Setup

UiPath Assistant is used to:

Run bots from your desktop.

Connect with Orchestrator.

Steps:

Open UiPath Assistant (from Start Menu).

Sign in with the same UiPath account.

Go to Settings → Orchestrator → Connect.

Once connected, your published bots appear here.

🧠 8. Best Practice Setup Tips

✅ Always run Studio as Administrator
✅ Save each practical in a separate project folder
✅ Name variables properly (e.g., num1, sumResult)
✅ Test workflows frequently with Message Box / Write Line
✅ Keep an Output screenshot for your journal

🚀 9. Verify Setup with a Sample Test Project

Try this mini test:

Create a new project → “TestSetup”

Add Message Box activity → Text = "Hello UiPath Installed Successfully!"

Run the bot (F5)
✅ If Message Box appears — your setup is successful.

🧩 10. Ready for Practicals

Now you’re 100% ready to perform:

Practicals 1–10 (Sequences, Loops, Excel, PDF, Email, Orchestrator, Chatbot)

With no extra configuration later.

Would you like me to give you a ready-to-follow folder/project setup guide (like how to organize all 10 practicals in UiPath Studio)?
It’ll help you keep all your workflows clean and submission-ready.

You said:
Now, i want u to provide beginner friendly steps to perform practical 1.
ChatGPT said:

Perfect 👍 Abhishek!
Let’s start with Practical 1: RPA Basics — Sequences and Flowcharts
This is your foundation practical in UiPath — so I’ll guide you step-by-step like a beginner 👇

🧩 Practical 1: RPA Basics — Sequences and Flowcharts
🎯 Objective:

To understand and create simple automation using:

Sequence-based project

Flowchart-based project

Number calculation automation

Use of different variable types

🧰 Before You Start

✅ Open UiPath Studio
✅ Create a new Process Project → Name it:
Practical_1_RPA_Basics

You’ll now see a file named Main.xaml — this is your main workflow file.

🧮 (a) Create a Simple Sequence-Based Project
🧠 Goal:

Display a welcome message and perform a simple addition of two numbers.

🪜 Steps:

Open UiPath Studio → Main.xaml

From the Activities Panel, drag a Sequence → name it "Simple_Sequence".

Inside the sequence, add:

Assign activity

num1 = 10

Assign activity

num2 = 20

Assign activity

sum = num1 + num2

Message Box activity

Text → "The sum of " + num1.ToString + " and " + num2.ToString + " is " + sum.ToString

Run the workflow (press F5).

✅ Output:
A message box appears → “The sum of 10 and 20 is 30”.

🔄 (b) Create a Flowchart-Based Project
🧠 Goal:

Use a Flow Decision to check if a number is positive or negative.

🪜 Steps:

In the same project, click Main.xaml → Delete existing sequence.

From Activities Panel, drag a Flowchart → name it "Number_Checker".

Drag these activities:

Assign activity: num = -5

Flow Decision: condition → num > 0

Two Message Box activities:

For True → “Number is Positive”

For False → “Number is Negative”

Connect arrows:

Assign → Flow Decision

True → “Positive Message Box”

False → “Negative Message Box”

Run the workflow.

✅ Output:
Shows → “Number is Negative”

🔢 (c) Automate UiPath Number Calculation
🧠 Goal:

Perform Subtraction, Multiplication, Division using variables.

🪜 Steps:

Create a New Sequence → Number_Calculation

Add Assign activities:

num1 = 50

num2 = 10

Add 3 more Assigns:

sub = num1 - num2

mul = num1 * num2

div = num1 / num2

Add 3 Message Boxes:

"Subtraction: " + sub.ToString

"Multiplication: " + mul.ToString

"Division: " + div.ToString

Run the sequence.

✅ Output:
Displays 3 message boxes with correct results.

🧮 (d) Create a Project Using Different Variable Types
🧠 Goal:

Use Number, String, Boolean, DateTime, Array, and DataTable in one project.

🪜 Steps:

Create a New Sequence → Variable_Types_Example

Add Assign activities:

numberVar = 25

nameVar = "Abhishek"

boolVar = True

dateVar = Now

arrVar = {"RPA", "UiPath", "Automation"}

Add Message Box:

"Hello " + nameVar + ", Today is " + dateVar.ToString("dd-MMM-yyyy") + ". Learning " + arrVar(1) + " is fun!"

Add a Build Data Table activity:

Create columns → Name (String), Score (Int32)

Add sample rows → ("Abhishek", 95), ("Ravi", 90)

Output → dtStudents

Add Output Data Table activity:

Input → dtStudents

Output → tableText (String)

Add a Message Box → Text = tableText

✅ Output:
Shows greeting message and a table like:

Name, Score
Abhishek, 95
Ravi, 90

🧾 📘 Journal Notes (Condensed for Writing)

Title: Practical 1 – RPA Basics: Sequences and Flowcharts

Aim: To create sequence and flowchart-based projects in UiPath and perform number automation using different variable types.

Procedure:

Open UiPath Studio and create a new process.

Use Sequence workflow to add, subtract, multiply, and divide numbers.

Use Flowchart workflow with a Flow Decision to check number sign.

Use multiple variable types — Number, String, Boolean, DateTime, Array, and DataTable.

Display results using Message Box.

Result:
Successfully created and executed UiPath workflows using sequence, flowchart, and various data types.

🧠 Tips for Beginners

✅ Use Ctrl + Space to quickly insert variable names.
✅ Use Output Panel (bottom) to view workflow logs.
✅ If something doesn’t run — check variable scope (set to Sequence level).
✅ Save screenshots of message boxes for your journal proof.

Would you like me to create a ready-to-import UiPath (.xaml) template for this Practical 1 (so you can just open and run it)?

You said:
Move to 2nd
ChatGPT said:

Excellent 👏 Abhishek!
Now let’s move to 🧩 Practical 2: Decision Making and Looping in UiPath — this is a very important concept for automating repetitive or conditional tasks.

I’ll explain each sub-question (a–f) step-by-step in a beginner-friendly + journal format, so you can directly perform and also write it in your practical notebook.

🧩 Practical 2: Decision Making and Looping
🎯 Objective:

To create UiPath automation workflows using:

If / Switch statements (Decision making)

For Each / While / Do While loops (Looping)

🧰 Before You Start

Open UiPath Studio

Create a new Process → name it:
Practical_2_DecisionAndLooping

Save the project → open Main.xaml

🅰️ (a) Count Names Starting with “A” from an Array
🧠 Goal:

Count how many names start with the letter "A".

🪜 Steps:

Drag a Sequence → rename it CountNamesWithA.

Add Assign activities:

names = {"Abhishek", "Ravi", "Aman", "Neha", "Anjali"}

count = 0

Drag a For Each activity:

For Each item in → names

Type Argument → String

Inside the loop:

Add If activity

Condition → item.StartsWith("A")

In Then section → Add Assign activity: count = count + 1

After loop, add Message Box:

Text → "Number of names starting with A: " + count.ToString

✅ Output:
“Number of names starting with A: 3”

🅱️ (b) Demonstrate Switch Statement with Example
🧠 Goal:

Use Switch to perform actions based on a string variable.

🪜 Steps:

Drag a Sequence → name it SwitchExample.

Add Assign: day = "Monday"

Drag a Switch activity:

Expression → day

Type → String

Add Three cases:

Case 1 → "Monday" → Message Box: “Start of the week!”

Case 2 → "Friday" → Message Box: “Weekend is near!”

Default → Message Box: “Just another day.”

Run the workflow.

✅ Output:
“Start of the week!”

🅲 (c) Print Numbers 1 to 10 Using For Each with Break
🧠 Goal:

Use For Each loop to print numbers from 1 to 10 and stop after 5.

🪜 Steps:

Drag a Sequence → PrintNumbers_1to10

Add Assign: numbers = Enumerable.Range(1,10).ToArray()

Add For Each activity:

For Each num in numbers

Type Argument: Int32

Inside loop:

Add If → Condition: num = 6

Then: Break activity (to stop loop)

Add Write Line → "Number: " + num.ToString

✅ Output (in Output Panel):

Number: 1
Number: 2
Number: 3
Number: 4
Number: 5

🅳 (d) Do While Activity: Print 1 to 10
🧠 Goal:

Use Do While loop to print numbers 1 to 10.

🪜 Steps:

Drag a Sequence → DoWhileExample

Add Assign: i = 1

Drag Do While activity

Condition → i <= 10

Inside Do section:

Add Write Line → "Number: " + i.ToString

Add Assign: i = i + 1

Run it.

✅ Output:
Prints numbers from 1 to 10 in Output panel.

🅴 (e) Delay Between Two Write Line Activities
🧠 Goal:

Pause automation for 5 seconds between two actions.

🪜 Steps:

Create new Sequence → DelayActivityExample

Add Write Line → "Hello, UiPath!"

Add Delay activity → Duration: 00:00:05

Add another Write Line → "Execution resumed after 5 seconds."

✅ Output:

Hello, UiPath!
(wait 5 seconds)
Execution resumed after 5 seconds.

🅵 (f) Decision Statements using If Activity
🧠 Goal:

Check if a number is even or odd using If condition.

🪜 Steps:

Create Sequence → IfStatementExample

Add Assign: num = 9

Add If activity:

Condition → num Mod 2 = 0

Then → Message Box: "Even Number"

Else → Message Box: "Odd Number"

✅ Output:
“Odd Number”

📘 Journal Notes (Condensed Format)

Title: Practical 2 – Decision Making and Looping in UiPath

Aim: To implement loops and decision-making statements in UiPath workflows.

Procedure:

Created an array and counted names starting with ‘A’ using For Each and If activity.

Used Switch statement for multiple condition checking.

Printed numbers 1 to 10 using For Each and Do While loop.

Demonstrated delay between two activities.

Checked even/odd number using If activity.

Result:
Successfully created workflows demonstrating decision making and looping using various UiPath activities (If, Switch, For Each, Do While, and Delay).

💡 Beginner Tips

✅ Use Write Line (not Message Box) for quick debugging loops.
✅ Don’t forget to change Type Argument to match variable type (String / Int32).
✅ Use Break only inside loop bodies.
✅ Save every sub-question as a separate Sequence for clarity.

Would you like me to move next to Practical 3: Types of Recording (Basic, Desktop, Web, etc.) — with step-by-step beginner guidance next?

You said:
Proceed for 3rd
ChatGPT said:

Perfect 👍 Abhishek!
Now let’s move to 🧩 Practical 3: Types of Recording in UiPath — an essential practical to understand how UiPath records user actions automatically.

This will help you automate repetitive tasks like typing, clicking, or navigating apps without writing much code.
Let’s go step-by-step 👇

🧩 Practical 3: Types of Recording in UiPath
🎯 Objective:

To understand and perform automation using different types of Recording in UiPath:

Basic Recording

Desktop Recording

Web Recording

Manual Recording

Recording using Notepad or Toolbar

🧰 Before You Start

✅ Open UiPath Studio
✅ Create a new Process Project → Name: Practical_3_Types_of_Recording
✅ Open Main.xaml

⚙️ What is Recording?

Recording in UiPath is a feature that automatically captures your keyboard and mouse actions (like click, type, select, etc.) and creates activities for you in the workflow.

UiPath provides different types of recording depending on the application you are automating:

Basic → Simple UI actions (click, type)

Desktop → Multiple windows in desktop apps

Web → Browser automation

Manual → Custom without auto-recording

🅰️ (a) Basic Recording using Toolbar
🧠 Goal:

Automate a simple action — open Notepad and type “Hello UiPath!”

🪜 Steps:

Open UiPath Studio → Design Tab → Record → Basic

Select Basic Recording.

UiPath minimizes and a Recording Toolbar appears.

Click Start Recording.

Perform these actions manually:

Open Notepad (from Start Menu).

Click inside Notepad window.

Type → Hello UiPath!

Click Save & Exit on the toolbar.

UiPath automatically generates activities (Open Application, Type Into, etc.).

Run the workflow.

✅ Output:
Notepad opens and automatically types “Hello UiPath!”.

🅱️ (b) Basic Recording using Notepad (Manually)
🧠 Goal:

Manually build the same workflow (without recording).

🪜 Steps:

Drag Open Application activity.

Indicate Notepad window.

Inside it:

Add Type Into activity → Text: "This is manual typing using UiPath!"

Add a Delay activity → 3 seconds.

Add Send Hotkey → Ctrl + S (to save file).

Add Type Into → "RPA_Recording.txt"

Add another Send Hotkey → Enter.

✅ Output:
UiPath opens Notepad, types the message, and saves the file automatically.

🅲 (c) Desktop Recording using Toolbar
🧠 Goal:

Automate a task across multiple desktop windows (e.g., Notepad + Calculator).

🪜 Steps:

Go to Design → Record → Desktop.

Start recording.

Perform:

Open Notepad → type "Automation Test".

Open Calculator (Win + search “Calculator”).

Perform addition 25 + 75.

Stop Recording → Save & Exit.

Run the workflow.

✅ Output:
Notepad opens, text appears, then Calculator opens and performs addition.

🅳 (d) Desktop Recording by Creating a Workflow (Manually)
🧠 Goal:

Manually automate actions on a desktop app (without auto-record).

🪜 Steps:

Add a Sequence → name it Desktop_Manual.

Add Open Application → Indicate Notepad.

Inside it:

Type Into: "Desktop Recording (Manual) Example"

Send Hotkey: Ctrl + S

Type Into: "DesktopExample.txt"

Send Hotkey: Enter

Add Message Box: "Desktop Recording Complete!"

✅ Output:
Automatically creates a file “DesktopExample.txt” containing the message.

🅴 (e) Web Recording Example
🧠 Goal:

Use Web Recorder to extract data from IMDb (movie rating).

🪜 Steps:

Open Chrome or Edge → go to: https://www.imdb.com

In UiPath Studio → Design → Record → Web

Start Recording:

In search bar → type "Inception"

Click Search

Click on the movie title.

Select the rating text and right-click → Copy.

Stop Recording → Save.

Add Message Box: → "Movie Rating Recorded!"

✅ Output:
UiPath opens browser, searches the movie, and extracts rating.

🅵 (f) Web Recording Manually
🧠 Goal:

Open a webpage and print its title (without recorder).

🪜 Steps:

Use Open Browser activity → URL: "https://www.wikipedia.org".

Inside the browser container:

Add Get Text activity → Indicate “Wikipedia” title text.

Output → variable pageTitle

Add Message Box: → pageTitle

Run the workflow.

✅ Output:
Displays → “Wikipedia”.

🧾 📘 Journal Notes (Condensed Format)

Title: Practical 3 – Types of Recording in UiPath

Aim: To perform different types of recording and understand their automation scope.

Procedure:

Performed Basic Recording to type text in Notepad automatically.

Used Desktop Recording to automate across Notepad and Calculator.

Used Web Recording to extract information from a website.

Manually created workflows to understand the activities generated by recorder.

Result:
Successfully created and executed UiPath workflows using Basic, Desktop, and Web Recording techniques.

💡 Tips for Beginners

✅ Always enable browser extension before Web Recording.
✅ For Desktop Recording — keep windows visible on screen.
✅ Use manual workflow after recording to understand generated activities.
✅ Use Delays (2–3 seconds) between actions for stability.
✅ Save output files for journal proof.

Would you like me to continue with Practical 4: Excel Automation next (it involves reading, writing, appending, and filtering Excel sheets)?

You said:
today, i have my practical exam of rpa. 
what stategies i can follow
ChatGPT said:

Perfect 👍 Abhishek! Since you have your RPA (UiPath) practical exam today, let’s make sure you go in fully confident and prepared.
Here’s a smart strategy + mindset plan for your exam:

🎯 1. Before the Exam (Preparation Strategy)
✅ Revise Key Concepts

Quickly go through:

Types of recordings – Basic, Desktop, Web.

Variables and data types (String, Int32, Boolean, Array).

Activities – Assign, Message Box, Input Dialog, Write Line, Excel Application Scope, Read/Write Range, For Each Row, If/While loops.

Selectors (how to check/edit in properties).

Exception Handling (Try-Catch activity).

Arguments and workflow reuse.

Packages (e.g., UiPath.Excel.Activities, UiPath.Mail.Activities, UiPath.PDF.Activities).

🧠 Practice Quickly (Hands-on)

Open UiPath and:

Run a Basic Recording demo on Notepad or Calculator.

Do a small Excel read/write test.

Try one decision-based automation (like comparing two numbers).

Open and close browser automation once (if required).

🧩 2. During the Exam (Execution Strategy)
✅ Read the Question Carefully

Understand what the input, process, and output are.

Identify whether it’s about data manipulation, file handling, browser automation, or recording.

✅ Plan Workflow First

Before dragging activities:

Think logically (Input → Processing → Output).

Use flowchart or sequence appropriately.

Define variables clearly with meaningful names (e.g., studentName, marks).

✅ Build Step-by-Step

Don’t rush. Run and check small parts of the workflow.

Use Message Box or Write Line for debugging.

Save frequently!

✅ Handle Common Issues
Problem	Quick Fix
Selector not found	Use Repair / Indicate Element again
Excel not found	Install UiPath.Excel.Activities
Browser not opening	Check if UiPath.UIAutomation.Activities is installed
Error in datatype	Convert using .ToString or CInt() properly
⚡ 3. After Building the Workflow

Run the process end-to-end.

Ensure output is correct (matches the problem statement).

Save your .xaml file with clear name (Practical3_DataManipulation.xaml).

Close unnecessary tabs before submission.

🏆 4. If You Get a Viva Question

Common quick answers:

Question	Answer
What is RPA?	RPA stands for Robotic Process Automation – it automates repetitive tasks using software robots.
What are variables?	Variables store data temporarily in UiPath workflows.
Difference between sequence and flowchart?	Sequence is linear; Flowchart allows branching and decision-making.
What are selectors?	XML tags used by UiPath to identify UI elements on screen.
What is the use of Try-Catch?	It handles runtime exceptions and prevents workflow crash.
🧘‍♂️ 5. Mindset Tips

Stay calm — even if one part fails, show your approach (teacher will give marks for logic).

Speak confidently during viva — even partial correct answers matter.

Save your workflow at each step.

If something doesn’t run due to package issues → tell the examiner it works locally but package dependency failed (common and acceptable reason).

Would you like me to prepare a “last-minute revision sheet” (1-page) with all UiPath activities and their use — so you can glance before exam?

You said:
now, i would like solve some pyqs, based on these provide beginner friendly steps to perform these problems on uipath studio
ChatGPT said:

Perfect 👍 Let’s prepare you for your RPA (UiPath) practical exam with PYQs (previous year questions) in a beginner-friendly, step-by-step way — so you can confidently perform them in UiPath Studio.

Before we start, I’ll explain how we’ll proceed 👇

⚙️ Preparation Before Solving PYQs

Make sure these are ready:

✅ UiPath Studio Installed (Community Edition is fine).

✅ UiPath Studio activated & opened.

✅ Main.xaml is your main workflow file.

✅ You know how to use these basic activities:

Sequence

Assign

Message Box / Write Line

Input Dialog

Excel Application Scope

Read Range / Write Range

If / Flow Decision

For Each / For Each Row

Now, let’s go through commonly asked UiPath practical PYQs with step-by-step solutions 👇

🧩 PYQ 1: Display a Welcome Message

Problem: Ask the user for their name and display a greeting message.

Steps:

Create a new Sequence (name: Welcome_Message).

Drag Input Dialog →

Title: “User Input”

Label: “Enter your name”

Output → variable userName (String)

Drag Message Box →

Text: "Welcome to UiPath, " + userName + "!"

Save → Run → Type your name → Output displays greeting ✅

🧩 PYQ 2: Add Two Numbers Entered by User

Problem: Take two inputs and show their sum.

Steps:

Create variables:

num1 (String)

num2 (String)

sum (Int32)

Use Input Dialog twice to get both numbers.

Use Assign:

sum = CInt(num1) + CInt(num2)


Use Message Box to show:

"The sum is: " + sum.ToString


✅ Output displays sum of two numbers.

🧩 PYQ 3: Read and Write Excel File

Problem: Read data from Excel Sheet1 and write to Sheet2.

Steps:

Drag Excel Application Scope → select file path.

Inside it, drag Read Range →

Sheet: “Sheet1”

Output → variable dt (DataTable)

Drag another Write Range →

Sheet: “Sheet2”

DataTable: dt
✅ This copies all data from Sheet1 → Sheet2.

🧩 PYQ 4: Check Whether a Number is Even or Odd

Problem: Input a number and check if even or odd.

Steps:

Input Dialog → get num (String)

Assign → n = CInt(num)

Use If condition:

n Mod 2 = 0


Then: Message Box → “Even Number”

Else: Message Box → “Odd Number”
✅ Output shows result accordingly.

🧩 PYQ 5: Open Notepad and Type Text

Problem: Open Notepad and write “Hello UiPath”.

Steps:

Use Open Application → Indicate Notepad.

Inside it, drag Type Into →

Text: “Hello UiPath!”

Run workflow → Notepad opens → text typed ✅

(Alternative) → Use Start Process activity

Filename: "notepad.exe"

Then Type Into to write text.

🧩 PYQ 6: Read Data from CSV and Display

Problem: Read CSV and show each record in Output Panel.

Steps:

Use Read CSV → output → dt (DataTable)

Use For Each Row →
Inside loop, add Write Line →

row("ColumnName").ToString


✅ Each row printed in Output Panel.

🧩 PYQ 7: Reverse a String

Problem: Input a string and display it in reverse.

Steps:

Input Dialog → text (String)

Assign →

reversed = StrReverse(text)


Message Box → "Reversed String: " + reversed

✅ Displays reversed text.

🧩 PYQ 8: Extract Data from PDF

Problem: Read text from PDF and display in Message Box.

Steps:

Install UiPath.PDF.Activities package.

Use Read PDF Text → select PDF file → output → pdfText.

Message Box → pdfText
✅ Displays entire PDF text.

🧩 PYQ 9: Exception Handling

Problem: Divide two numbers with try-catch.

Steps:

Drag Try Catch activity.

Inside Try:

Assign: result = num1 / num2

In Catch → add System.Exception →
Message Box: “Error occurred!”
✅ Shows result or handles error.

🧩 PYQ 10: Email Automation

Problem: Send an email using Outlook.

Steps:

Use Send Outlook Mail Message.

Set:

To: "example@gmail.com"

Subject: "Test Mail"

Body: "This is a test from UiPath."
✅ Sends email via Outlook.

Would you like me to continue with next set of advanced PYQs (like loops, data tables, automation, and selectors)?
That will help you cover all levels of questions that can appear in the practical exam.

You said:
ok, now i will provide you some pyqs problems, i want u to provide detailed step by step process to perform in uipath from very scratch like packages installation, and line by line steps for a begginer
ChatGPT said:
Thought for 22s

Awesome — I’m ready. 👍

Below I’ll do three things right now so you can paste your PYQs and I’ll start converting each into a beginner-friendly, line-by-line UiPath solution:

Show exactly how to install the common UiPath packages you’ll need (very step-by-step).

Give a reusable step-by-step template I’ll follow for every PYQ you send (so you know what to expect).

Give one full worked example (from scratch) so you see the level of detail I'll deliver for each PYQ.

After this, paste your first PYQ (one or multiple) and I’ll produce the full detailed UiPath solution(s).

1) Install the common UiPath packages (very explicit)

(Do this once per project you create.)

Open UiPath Studio and open the project you’ll use (or create a new Process → name it).

Click Manage Packages (top ribbon) or press Ctrl+P.

In Manage Packages:

On the left choose Official (or “All Packages / Official”).

In the search box type the package name (examples below).

Click the package → Install → then Save (bottom right).

Restart UiPath Studio if it asks.

Common packages to install (search & install each if needed):

UiPath.System.Activities (usually preinstalled) — core activities

UiPath.UIAutomation.Activities — UI automation & selectors

UiPath.Excel.Activities — Excel Application Scope, Read/Write Range

UiPath.PDF.Activities — Read PDF Text / Read PDF with OCR

UiPath.Mail.Activities — Send/Receive emails (Outlook, SMTP)

UiPath.WebAPI.Activities — REST / API calls

UiPath.Credentials.Activities — secure credential handling

UiPath.Core.Activities (core) / UiPath.UIAutomationNext (optional newer UI set)

Browser extensions (for web automation):

In UiPath Studio home → Tools → click Chrome or Edge extension → Install → then Restart browser.

2) The exact template I will use for each PYQ you give

For every PYQ you paste I will return a detailed solution using this structure:

A. Problem statement (copied) — clarifies assumptions (I’ll assume sample files if you don’t provide them)
B. Prerequisites / Packages to install — exact package names and why they’re needed
C. Project setup (from scratch)

Create Project → name

Files to place in project folder (e.g., input.xlsx) — or how to create sample input
D. Variables & Arguments (names, types, default values)
E. Step-by-step Activities (line-by-line) — EXACT sequence of activities to drag, where to indicate elements, and the precise property values (e.g., InputDialog → Title:Enter num1, Output:num1)
F. Selectors / Indicate Element tips (if UI/web automation) — exact tips to make selectors stable
G. Debugging & common errors — what to check if something fails and quick fixes
H. Expected Output & how to verify (what examiner will look for)
I. Journal entry (1-2 paragraph condensed) ready to paste in your practical notebook
J. Optional improvements / extra credit (if you want to extend the solution)

3) Full worked example — From scratch — “Add two numbers (user input)”

I’ll show the same level of detail I’ll use for your PYQs.

Problem: Take two numbers from user and display their sum.

A. Prerequisites / Packages

No extra package required (uses System & UI activities preinstalled).

Ensure UiPath.System.Activities and UiPath.UIAutomation.Activities are present.

B. Project setup

Open UiPath Studio → Start → Process.

Name: PYQ_AddTwoNumbers

Location: Documents\UiPath\Projects\PYQ_AddTwoNumbers

Description (optional): Add two numbers example

Click Create → open Main.xaml.

C. Variables
Open the Variables panel (bottom). Create variables:

num1_str — Type: String — Default: (leave blank)

num2_str — Type: String

num1 — Type: Int32

num2 — Type: Int32

sum — Type: Int32

D. Step-by-step Activities (drag in this order to Main.xaml)

Sequence

Drag Sequence from Activities → Rename to Add_Two_Numbers_Sequence.

Input Dialog (first number)

Drag Input Dialog into sequence.

Properties (on right panel):

Title: Enter Number 1

Label: Please enter the first number:

Output → num1_str (click variable dropdown → select num1_str)

Tip: If num1_str not present, click the output field → type num1_str → press Ctrl+K to create variable.

Input Dialog (second number)

Drag another Input Dialog below the first.

Title: Enter Number 2

Label: Please enter the second number:

Output → num2_str

Assign (convert first input to integer)

Drag Assign.

Left: num1

Right: CInt(num1_str)

Explanation: CInt() converts string to Int32. (If float values possible, use CDbl() and Double type.)

Assign (convert second)

Left: num2

Right: CInt(num2_str)

Assign (sum)

Left: sum

Right: num1 + num2

Message Box (display result)

Drag Message Box.

Text: "Sum of " + num1.ToString + " and " + num2.ToString + " is " + sum.ToString

Tip: You can also format: String.Format("Sum of {0} and {1} is {2}", num1, num2, sum)

E. Run

Save (Ctrl+S).

Click Run File (or press F5).

Enter numbers when dialog appears — see message box with result.

F. Debugging / Common errors

If conversion fails with FormatException → user input was not numeric. Fix: add an If activity after input:

Condition: IsNumeric(num1_str) (VB) — or use Try/Catch around CInt with System.Exception catch and show message "Please enter a valid number".

If Message Box shows 0 or empty → check variable scopes (Variables panel → scope should be the Sequence).

If Input Dialog doesn’t appear → check if Studio modal windows blocking. Use Publish/Run from UiPath Assistant if necessary.

G. Journal entry (condensed)
Title: Add Two Numbers — PYQ
Aim: Get two numeric inputs from user, convert inputs to integers, compute sum, and show result via Message Box.
Procedure: Created a sequence with two Input Dialogs storing inputs into string variables, converted to Int32 using CInt(), added them, and displayed the result in a Message Box.
Result: Correct sum displayed for sample inputs.

H. Optional improvement

Add validation using IsNumeric() and loop until valid input is given (use While / Do While).

Use Try/Catch for robust exception handling.